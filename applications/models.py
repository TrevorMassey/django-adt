from django.db import modelsfrom django_extensions.db.fields import AutoSlugFieldfrom django_fsm import FSMField, transitionclass Application(models.Model):    # Fields    created = models.DateTimeField(auto_now_add=True, editable=False)    last_updated = models.DateTimeField(auto_now=True, editable=False)    name = models.CharField(max_length=255)    gender = models.CharField(max_length=10)    birthdate = models.DateTimeField()    timezone = models.IntegerField()    longitude = models.DecimalField(max_digits=11, decimal_places=7)    latitude = models.DecimalField(max_digits=11, decimal_places=7)    character_name = models.CharField(max_length=255)    character_class = models.CharField(max_length=255)    character_level = models.IntegerField()    technical_expertise = models.CharField(max_length=30)    technical_skills = models.TextField()    playtime = models.IntegerField()    player_type = models.CharField(max_length=30)    game_detailed_history = models.TextField()    why_join = models.TextField()    game_officer_history = models.TextField()    # Relationship Fields    answers = models.ManyToManyField('applications.ApplicationQuestion',)    user = models.ForeignKey('users.User',)    # State machine        STEP_1_SUBMITTED = 'step_1_submitted'    STEP_1_REDO = 'step_1_redo'    STEP_1_REDO_SUBMITTED = 'step_1_redo_submitted'    STEP_1_APPROVED = 'step_1_approved'    STEP_1_REDO_APPROVED = 'step_1_redo_approved'    STEP_2_SUBMITTED = 'step_2_submitted'    STEP_2_REDO = 'step_2_redo'    STEP_2_REDO_SUBMITTED = 'step_2_redo_submitted'    STEP_3_INTERVIEW = 'step_3_interview'    ACCEPTED = 'accepted'    REJECTED = 'rejected'    CLOSED = 'closed'    state = FSMField(default=STEP_1_SUBMITTED)    class Meta:        ordering = ('-created',)    def __unicode__(self):        return u'%s' % self.id    # Step 1    @transition(field=state, source=[STEP_1_SUBMITTED], target=STEP_1_REDO)    def request_redo(self):        """        All the side effects!        """        # send email        # create notification        pass    @transition(field=state, source=[STEP_1_REDO], target=STEP_1_REDO_SUBMITTED)    def submit_redo(self):        """        All the side effects!        """        # send email        # create notification for recruitment officers        pass    @transition(field=state, source=[STEP_1_SUBMITTED], target=STEP_1_APPROVED)    def approve_step_one(self):        """        All the side effects!        """        # send email        # create notification        pass    @transition(field=state, source=[STEP_1_SUBMITTED], target=STEP_1_REDO_APPROVED)    def approve_step_one_redo(self):        """        All the side effects!        """        # send email        # create notification        pass    # Step 2    @transition(field=state, source=[STEP_1_APPROVED], target=STEP_2_SUBMITTED)    def submit_step_two(self):        """        All the side effects!        """        # send email        # create notification        pass    @transition(field=state, source=[STEP_1_REDO_APPROVED], target=STEP_2_REDO_SUBMITTED)    def submit_step_two(self):        """        All the side effects!        """        # send email        # create notification        pass    @transition(field=state, source=[STEP_2_SUBMITTED], target=STEP_2_REDO)    def request_redo_two(self):        """        All the side effects!        """        # send email        # create notification        pass    @transition(field=state, source=[STEP_2_REDO], target=STEP_2_REDO_SUBMITTED)    def submit_redo_two(self):        """        All the side effects!        """        # send email        # create notification        pass    @transition(field=state, source=[STEP_2_SUBMITTED, STEP_2_REDO_SUBMITTED], target=STEP_3_INTERVIEW)    def approve_step_two(self):        """        All the side effects!        """        # send email        # create notification        pass    @transition(field=state, source=[STEP_1_SUBMITTED, STEP_1_REDO_SUBMITTED, STEP_2_SUBMITTED, STEP_2_REDO_SUBMITTED, STEP_3_INTERVIEW], target=REJECTED)    def reject(self):        """        All the side effects!        """        # send email        # create notification        pass    @transition(field=state, source=[STEP_1_REDO, STEP_1_APPROVED, STEP_1_REDO_APPROVED, STEP_2_REDO, STEP_3_INTERVIEW], target=CLOSED)    def close(self):        """        All the side effects!        """        # send email        # create notification        pass    @transition(field=state, source=[STEP_1_SUBMITTED, STEP_2_SUBMITTED, STEP_3_INTERVIEW], target=ACCEPTED)    def accept(self):        """        All the side effects!        """        # send email        # create notification        passclass ApplicationQuestion(models.Model):    # Fields    question = models.CharField(max_length=255)    slug = AutoSlugField(populate_from='question', blank=True)    created = models.DateTimeField(auto_now_add=True, editable=False)    last_updated = models.DateTimeField(auto_now=True, editable=False)    order = models.IntegerField()    # Relationship Fields    chapter = models.ForeignKey('games.Chapter',)    class Meta:        ordering = ('-created',)    def __unicode__(self):        return u'%s' % self.slugclass ApplicationAnswer(models.Model):    # Fields    answer = models.TextField()    created = models.DateTimeField(auto_now_add=True, editable=False)    # Relationship Fields    question = models.OneToOneField('applications.ApplicationQuestion',)    class Meta:        ordering = ('-created',)    def __unicode__(self):        return u'%s' % self.id